/**
* HEP_Integration_Util --- Class contains all the generic code required for integrations 
* @author    Tejaswini Veliventi
*/
public without sharing class HEP_Integration_Util {

    private static HEP_Services__c objAuthService {get;set;}

    /**
    * Retrieves the OAuth Token for the HTTP callouts 
    * @param    sServiceName- Name of custome Setting record which stores the Details of OAuth end point.
    * @return   Token type and Access token
    */
    public static String getAuthenticationToken(String sServiceName){
        String sStatus;
        objAuthService = HEP_Services__c.getInstance(sServiceName);
        AccessTokenWrapper objWrapper = new AccessTokenWrapper();
        if(objAuthService != null){
            HttpRequest objReq = new HttpRequest();
            String sEndPoint = objAuthService.Endpoint_URL__c + objAuthService.Service_URL__c;
            //Building the http request with detials from custom settng
            objReq.setEndpoint(sEndPoint);
            objReq.setMethod(getConstantValue('HEP_METHOD_POST'));
            objReq.setTimeout(Integer.valueOf(getConstantValue('HEP_SET_TIMEOUT')));
            objReq.setBody(getConstantValue('HEP_GRANT_TYPE') + objAuthService.Service_Account_ID__c + 
                        getConstantValue('HEP_CLIENT_ID') + objAuthService.Client_Id__c +
                        getConstantValue('HEP_CLIENT_SECRET') + objAuthService.Client_Secret__c);
            objReq.setHeader(getConstantValue('HEP_CONTENT_TYPE') , getConstantValue('HEP_URL_ENCODED'));
            Http objHttp = new HTTP();
            try{
                HttpResponse objRes = objHttp.send(objReq);
                String sResponseBody = objRes.getBody(); 
                System.debug('response..' + sResponseBody);
                sStatus = objRes.getStatus();
                //Assign HTTP status to global constants so that in respective class this status can be checked for success
                if (sStatus.equals(getConstantValue('HEP_STATUS_OK'))) {
                    objWrapper = (AccessTokenWrapper)Json.deserialize( sResponseBody , AccessTokenWrapper.class );
                } 
                else {
                  HEP_Error_Log.BusinessException(getConstantValue('HEP_OAUTH_SERVICE_ERROR'), getConstantValue('HEP_INTEGRATION_OUTBOUND') ,
                                                   sStatus, '', getConstantValue('HEP_INTEGRATION_UTIL'), getConstantValue('HEP_RETRIEVE_OAUTH'), '', '');
                  return sStatus;
                }
            }
            //create error log record on exception
            catch(Exception excep){
                System.debug('Exception at line : ' + excep.getLineNumber() + ' ' + excep.getMessage() );
                HEP_Error_Log.genericException(getConstantValue('HEP_OAUTH_OUTBOUND_EXCEPTION'), getConstantValue('HEP_INTEGRATION_OUTBOUND'), excep,
                                               getConstantValue('HEP_INTEGRATION_UTIL') , getConstantValue('HEP_RETRIEVE_OAUTH'), '', '');
                return 'Exception';
            }
        }
        //custom setting data not found, then return null
        else{
            System.debug('Error - Can not find custom Setting Entry for Authentication');
            return null;
        }
        //return the tokentype+ token 
        String sFinalReturnValue;
        if(objWrapper.token_type != null && objWrapper.access_token != null){
          sFinalReturnValue = objWrapper.token_type + ' ' + objWrapper.access_token;
        }
        return sFinalReturnValue;
    }
    
    
    /**
    * updateInterfaceTransactionError --- Creates interface txn error record
    * @param    objIntTxnResponse an instance of interface txn response class
    * @return   nothing
    */
    public static void updateInterfaceTransactionError(HEP_InterfaceTxnResponse objIntTxnResponse){
        if(objIntTxnResponse != null){
            // Create an instance of HEP_Interface_Transaction_Error__c
            HEP_Interface_Transaction_Error__c objIntTxnError = new  HEP_Interface_Transaction_Error__c();
            objIntTxnError.Status__c = objIntTxnResponse.sStatus;
            objIntTxnError.Error_Datetime__c = System.now();
            if(objIntTxnResponse.sErrorMsg != null){
                objIntTxnError.Error_Description__c = String.valueof(objIntTxnResponse.sErrorMsg).left(32765);      
            }     
            objIntTxnError.HEP_Interface_Transaction__c = objIntTxnResponse.sInterfaceTxnId;
            // Inserting the record
            insert objIntTxnError;
            //For content Version        
            map<String, blob> mapContentBodies = new map<String, blob>();
            if(objIntTxnResponse.sResponse != null)
                mapContentBodies.put(getConstantValue('HEP_INTEGRATION_RESPONSE'), blob.valueof(String.valueof(objIntTxnResponse.sResponse)));
            if(objIntTxnResponse.sRequest != null)    
                mapContentBodies.put(getConstantValue('HEP_INTEGRATION_REQUEST'), blob.valueof(String.valueof(objIntTxnResponse.sRequest)));
            String sContentType = getConstantValue('HEP_CONTENT_TYPE_PDF');
            createFile(objIntTxnError.id, mapContentBodies, sContentType);
        }        
    }
 
 
    /**
    * Creates a SingleEmailMessage for every interface transaction error record
    * @param    Takes HTTPRequest , HTTPResponse as parameter
    * @return   Messaging.SingleEmailMessage Object instance
    */
    public static Messaging.SingleEmailMessage createSingleEmailMessage(List<string> lstToAddresses, Id TargetObjectId, Id WhatId, Id TemplateId, List<Messaging.Emailfileattachment> lstFileAttachments){
        Messaging.SingleEmailMessage objMessage = new Messaging.SingleEmailMessage();
        objMessage.setToAddresses(lstToAddresses);  
        objMessage.setTargetObjectId(TargetObjectId); //The first Team Member ID found, this email address will not be in the emailList
        objMessage.setWhatId(WhatId);
        objMessage.setTemplateId(TemplateId);
        objMessage.SaveAsActivity = false;
        objMessage.setFileAttachments(lstFileAttachments);
        return objMessage;
    }
    
    
    /**
    * createInterfaceTxn --- Creates a new interface transaction record
    * @param    objIntTxnResponse 
    * @return   the interface txn record id
    */
    public static void createInterfaceTxn(HEP_InterfaceTxnResponse objIntTxnResponse){
        try{
            HEP_Interface_Transaction__c objIntTxn;
            // If the transaction id is not there, then we need to insert it, otherwise we need to update it
            if(String.isNotBlank(objIntTxnResponse.sInterfaceTxnId)){
                objIntTxn = new  HEP_Interface_Transaction__c(id = objIntTxnResponse.sInterfaceTxnId);
                if(objIntTxnResponse.iMaxRetriesAllowed > 0){
                    objIntTxn.Retry_Count__c = objIntTxnResponse.iCurrentNoOfRetries + 1;
                }
            }
            else{
                objIntTxn = new  HEP_Interface_Transaction__c();
                objIntTxn.Retry_Count__c = 1;   
                objIntTxn.Transaction_Datetime__c = System.now(); 
            }   
            objIntTxn.HEP_Interface__c = objIntTxnResponse.sInterfaceId;
            if(objIntTxnResponse.bIsSourceAsAttachment != true){
                if(String.isNotEmpty(objIntTxnResponse.sSourceId) && objIntTxnResponse.sSourceId.length() > 254){
                    objIntTxn.Object_Id__c = objIntTxnResponse.sSourceId.substring(0, 254);
                }
                else{
                    objIntTxn.Object_Id__c = objIntTxnResponse.sSourceId;
                }
            }             
            objIntTxn.Status__c = objIntTxnResponse.sStatus;            
            if(objIntTxnResponse.sStatus == getConstantValue('HEP_FAILURE') && objIntTxnResponse.iMaxRetriesAllowed > objIntTxn.Retry_Count__c){
                objIntTxn.Next_Retry_Time__c = System.now().addMinutes(objIntTxnResponse.iRetryInterval);
            }
            // Upsert the interface txn record
            upsert objIntTxn;
            if(objIntTxnResponse.bIsSourceAsAttachment == true){
                if(String.isEmpty(objIntTxn.Object_Id__c)){
                    map<String, list<string>> mapParentIdsFileNames = new map<String, list<string>>();
                    list<String> lstFileName = new list<String>();
                    lstFileName.add(HEP_Integration_Util.getConstantValue('HEP_INTEGRATION_SOURCE')); 
                    mapParentIdsFileNames.put(objIntTxn.Id,lstFileName);
                    map<String, map<string, string>> mapContentDocumentOutput = HEP_Integration_Util.retriveDatafromContentBulkified(mapParentIdsFileNames);
                    if((mapContentDocumentOutput.keyset()).isEmpty()){
                        map<String, blob> mapContentBodies = new map<String, blob>();
                        mapContentBodies.put(getConstantValue('HEP_INTEGRATION_SOURCE'), blob.valueof(objIntTxnResponse.sSourceId)); 
                        String sContentType = getConstantValue('HEP_CONTENT_TYPE_PDF');
                        //to check if content file needs to be created --Roshi
                        if(objIntTxnResponse.bIsCreateContentFile)
                        createFile(String.valueOf(objIntTxn.id), mapContentBodies, sContentType); 
                    }
                }
            }    
            // If the transaction has failed, create error record
            if(objIntTxnResponse.sStatus == getConstantValue('HEP_FAILURE')){
                objIntTxnResponse.sInterfaceTxnId = objIntTxn.id;
                updateInterfaceTransactionError(objIntTxnResponse);
                // If its an inbound txn and the txn is failure, even then add the content records for request and response ----Roshi
                if(objIntTxnResponse.bInboundTxn && objIntTxnResponse.bIsCreateContentFile){
                    createContentRecords(objIntTxnResponse.sRequest, objIntTxnResponse.sResponse, String.valueOf(objIntTxn.id) , objIntTxnResponse.sSourceId,objIntTxnResponse.bIsSourceAsAttachment ,objIntTxnResponse.bInboundTxn);
                }
            } 
            else if(objIntTxnResponse.bIsCreateContentFile){
                // If the txn is successful and create content file is true then add the content records for request and response ----Roshi
                createContentRecords(objIntTxnResponse.sRequest, objIntTxnResponse.sResponse, String.valueOf(objIntTxn.id) , objIntTxnResponse.sSourceId, objIntTxnResponse.bIsSourceAsAttachment ,objIntTxnResponse.bInboundTxn);                
            }      
        }catch(exception ex){
            System.debug('Exception at line ' + ex.getLinenumber() + 'Exception message ' + ex.getMessage());
            HEP_Error_Log.genericException('Error in creating interface txn','DML errors', ex, 'HEP_Integration_Util', 'createInterfaceTxn','','');
        }        
    }
     

    /**
    * createContentRecords --- Creates content object records for request and response
    * @param    sRequest - request body
    * @param    sResponse - response body
    * @param    sParentId - id of the parent record to which content object is to be associated
    * @return   nothing
    */
    public static void createContentRecords(String sRequest, String sResponse, String sParentId,String sSourceId, Boolean bIsSourceAsAttachment,Boolean bInboundTxn){
        // Add request and response to the transaction record if its successful        
        map<String, blob> mapContentBodies = new map<String, blob>(); 
        if(sResponse != null)
            mapContentBodies.put(getConstantValue('HEP_INTEGRATION_RESPONSE'), blob.valueof(sResponse));
        if(sRequest != null)    
            mapContentBodies.put(getConstantValue('HEP_INTEGRATION_REQUEST'), blob.valueof(sRequest));
        String sContentType = getConstantValue('HEP_CONTENT_TYPE_PDF');
        
        createFile(sParentId, mapContentBodies, sContentType);
    }
    

    /**
    * create File to store request-response of interface transaction in salesforce 
    * @param    objIntTxnResponse - parentId-id of transaction Error, map --> fileName- name of the file, body - request or response value, contentType - Content type
    * @return   Void
    */
    public static void createFile(Id parentId, map<String, Blob> mapBodies, String sContentType) {
        Savepoint objSavePoint = Database.setSavepoint();
        try{
            if(parentId != null && mapBodies != null){
                // insert a version of the file - if no ContentDocumentId, then it creates a new ContentDocument
                list<ContentVersion> lstContentVersions = new list<ContentVersion>();
                
                for(String sFileName : mapBodies.keyset()){
                    
                    ContentVersion objContentVersion = new ContentVersion();
                    objContentVersion.ContentLocation = getConstantValue('HEP_CURRENT_LOCATION_S'); // S = within Salesforce, E = External
                    objContentVersion.VersionData = mapBodies.get(sFileName);
                    objContentVersion.Title = sFileName;
                    //cv1.ContentType = contentType;
                    objContentVersion.PathOnClient = sFileName;
                    if(mapBodies.get(sFileName) != null && !String.isEmpty(mapBodies.get(sFileName).toString()))
                        lstContentVersions.add(objContentVersion);
                }
                if(lstContentVersions != null && !lstContentVersions.isEmpty()){
                    insert lstContentVersions;   
                    // insert a ContentDocumentLink with the fiel version
                    list<ContentVersion> lstContentVersion = [SELECT Id, ContentDocumentId 
                                                              FROM ContentVersion 
                                                              WHERE Id IN :lstContentVersions];                                              
                    list<ContentDocumentLink> lstContentDocList = new list<ContentDocumentLink>();
                    for(ContentVersion objContentVersion : lstContentVersion){
                        ContentDocumentLink objContentDocLink = new ContentDocumentLink();
                        objContentDocLink.ContentDocumentId = objContentVersion.ContentDocumentId;
                        objContentDocLink.LinkedEntityId = parentId;
                        objContentDocLink.ShareType = getConstantValue('HEP_SHARE_TYPE_V');
                        lstContentDocList.add(objContentDocLink);
                    }
                    System.debug('lstContentDocList+++++'+lstContentDocList);
                    if(lstContentDocList != null && !lstContentDocList.isEmpty()){
                        insert lstContentDocList;
                    }        
                }
            }
        }  
        catch(Exception ex){
            Database.rollback(objSavePoint);
            throw ex;
        }                  
    }

    /**
    * saveFileDatainContent --- Create content Version Record and link it to the ParentId
    * @param   Id : Paernt Object Id, map<string, string> (string : FileName, string : Data in string Format), String : FileType
    * @return   set<Id> ContentLink object Ids that links the data in content Version with parent Ids
    */
    public static set<Id>  saveFileDatainContent(Id ParentId, map<string, string> mapFileNameDatas, string sFileType){
        Savepoint objSavePoint = Database.setSavepoint();
        try{
            //All ContentLink Ids to be returns if created 
            set<id> setContentDocumentLinkIds = new set<id>();
            //Checking the Mandatory values to create the Content Varsion Record
            if(ParentId != null && mapFileNameDatas != null){
                //Content Versions to be inserted
                list<ContentVersion> lstContentVersions = new list<ContentVersion>();

                //Loop through all the Datas
                for(string sFileName : mapFileNameDatas.keyset()){
                    //Check if FileName Contains a data against it
                    if(mapFileNameDatas.containskey(sFileName)){
                        //Create the ContentVersion Record
                        ContentVersion objContentVersion = new ContentVersion();
                        objContentVersion.ContentLocation = getConstantValue('HEP_CURRENT_LOCATION_S'); // S = within Salesforce, E = External
                        //objContentVersion.Title = sFileName + '.' + sFileType;
                        objContentVersion.Title = sFileName;
                        //objContentVersion.ContentType = sFileType;
                        objContentVersion.VersionData = blob.valueOf(mapFileNameDatas.get(sFileName));
                        objContentVersion.PathOnClient = sFileName;
                        lstContentVersions.add(objContentVersion);
                    }    
                }    

                if(lstContentVersions != null && !lstContentVersions.isEmpty()){
                    insert lstContentVersions; 

                    // get the content Document Ids to link the document with Content Link
                    list<ContentVersion> lstRetrivedContentVersions = [SELECT Id, ContentDocumentId 
                                                               FROM ContentVersion 
                                                               WHERE Id IN :lstContentVersions];            
                    //Create Document Link records to link the documents with Parent Records
                    list<ContentDocumentLink> lstContentDocLinks = new list<ContentDocumentLink>();
                    for(ContentVersion objContentVersion : lstRetrivedContentVersions){
                        ContentDocumentLink objContentDocLink = new ContentDocumentLink();
                        objContentDocLink.ContentDocumentId = objContentVersion.ContentDocumentId;
                        objContentDocLink.LinkedEntityId = parentId;
                        objContentDocLink.ShareType = getConstantValue('HEP_SHARE_TYPE_V');
                        lstContentDocLinks.add(objContentDocLink);
                    }
                    if(lstContentDocLinks != null && !lstContentDocLinks.isEmpty()){
                        insert lstContentDocLinks;
                        for(ContentDocumentLink objContentDocLink : lstContentDocLinks){
                            setContentDocumentLinkIds.add(objContentDocLink.id);
                        }
                    }
                } 
            }       
            if(setContentDocumentLinkIds != null)
                return setContentDocumentLinkIds;
            else
                return null;
        }catch(exception Ex){
            Database.rollback(objSavePoint);
            throw ex;
            return null;
        }        
    }        

   /**
    * retriveDatafromContent --- Retrive Content version data in string format by ParentId and Name
    * @param   map<id, string> (Id : Paernt Object Id, string : FileName)
    * @return  map<Id, string>(string : Retrived data in string format)
    */
   public static map<String, map<string, string>> retriveDatafromContentBulkified(map<String, list<string>> mapParentIdsFileNames){
        try{
            //All Content version names vs values in string 
            map<string, string> mapContentVersionTitleVsData = new map<string, string>();
            //All Parents Ids to be put in Set - Salesforce restriction
            set<String> setParentIds = mapParentIdsFileNames.keySet();
            //All ParentID related Content Versions
            List<ContentVersion> lstContentVersions = new List<ContentVersion>();
            //Map ContentDocumentID vs ParentIDs
            map<string, string> mapParentIdVsContentDocumentIds = new map<string, string>();
            //MapContentDocumetID vs filename and Datas
            map<String, map<string, string>> mapContentDocIdVsDocDataFileName = new map<String, map<string, string>>();
            //Return values parent Ids against content version data 
            map<String, map<string, string>> mapParentIdvsAllData = new map<String, map<string, string>>();
            //Fetch all file names 
            set<string> setFileNames = new set<string>();

            //Checking the Mandatory values to retrive the Content Datas
            if(mapParentIdsFileNames != null){
                System.debug('I am here 1');
                System.debug('mapParentIdsFileNames : ' + mapParentIdsFileNames);
                if(mapParentIdsFileNames.keySet() != null){
                    system.debug('I am here 2');
                    System.debug('mapParentIdsFileNames.keyset() : ' + mapParentIdsFileNames.keySet());
                    List<ContentDocumentLink> listContentDocumentLinks = [select id, LinkedEntityId, ContentDocumentId from ContentDocumentLink where LinkedEntityId in :setParentIds];
                    system.debug('listContentDocumentLinks : ' + listContentDocumentLinks);
                    system.debug('listContentDocumentLinks.size() : ' + listContentDocumentLinks.size());
                    if(listContentDocumentLinks != null && !listContentDocumentLinks.isEmpty()){
                        system.debug('I am here 3');
                        for(ContentDocumentLink objContentDocLink : listContentDocumentLinks){
                            mapParentIdVsContentDocumentIds.put(objContentDocLink.ContentDocumentId, objContentDocLink.LinkedEntityId);
                        }
                        system.debug('mapParentIdVsContentDocumentIds : ' + mapParentIdVsContentDocumentIds);
                        if(!(mapParentIdVsContentDocumentIds.keyset()).isEmpty()){
                            system.debug('I am here 4');
                            //Get all File Names
                            for(List<string> lstFileNames : mapParentIdsFileNames.values()){
                                for(string fileName : lstFileNames){
                                    setFileNames.add(fileName);
                                }
                            }
                            //Fetching Content version based on ContentDocumentId
                            lstContentVersions = [select id, VersionData,Title,ContentDocumentId from contentVersion where ContentDocumentId in :mapParentIdVsContentDocumentIds.keySet() and Title in :setFileNames];
                        }
                        system.debug('lstContentVersions : ' + lstContentVersions);
                        system.debug('lstContentVersions.size() : ' + lstContentVersions.size());
                        if(lstContentVersions != null && !lstContentVersions.isEmpty()){
                            system.debug('I am here 5');
                            for(ContentVersion objContentVersion : lstContentVersions){
                                if(objContentVersion.VersionData != null){
                                    system.debug('I am here 6');
                                    mapContentVersionTitleVsData = new map<string, string>();
                                    System.debug('objContentVersion.VersionData -----> ' + objContentVersion.VersionData);
                                    mapContentVersionTitleVsData.put(objContentVersion.Title, (objContentVersion.VersionData).toString());
                                    mapContentDocIdVsDocDataFileName.put(objContentVersion.ContentDocumentId, mapContentVersionTitleVsData);
                                }    
                            }
                            system.debug('mapContentDocIdVsDocDataFileName : ' + mapContentDocIdVsDocDataFileName);
                        }
                        if(!(mapParentIdVsContentDocumentIds.Keyset()).isEmpty()){
                            system.debug('I am here 7');
                            for(id ContentDocumentId : mapContentDocIdVsDocDataFileName.Keyset()){
                                if(mapParentIdvsAllData.containsKey(mapParentIdVsContentDocumentIds.get(ContentDocumentId))){
                                    system.debug('I am here 8');
                                    system.debug(' 8 ContentDocumentId : ' + ContentDocumentId);
                                    system.debug('mapParentIdVsContentDocumentIds.get(ContentDocumentId) in IF : ' + mapParentIdVsContentDocumentIds.get(ContentDocumentId));
                                    system.debug('mapContentDocIdVsDocDataFileName : ' + mapContentDocIdVsDocDataFileName.get(ContentDocumentId));
                                    mapParentIdvsAllData.get(mapParentIdVsContentDocumentIds.get(ContentDocumentId)).putAll(mapContentDocIdVsDocDataFileName.get(ContentDocumentId));
                                    system.debug('mapParentIdvsAllData : ' + mapParentIdvsAllData);
                                }
                                else{
                                    system.debug('I am here 9');
                                    system.debug(' 9 ContentDocumentId : ' + ContentDocumentId);
                                    system.debug('mapParentIdVsContentDocumentIds.get(ContentDocumentId) in Else : ' + mapParentIdVsContentDocumentIds.get(ContentDocumentId));
                                    mapParentIdvsAllData.put(mapParentIdVsContentDocumentIds.get(ContentDocumentId),mapContentDocIdVsDocDataFileName.get(ContentDocumentId));
                                    system.debug('mapParentIdvsAllData : ' + mapParentIdvsAllData);
                                }
                                  
                            }
                            system.debug('mapParentIdvsAllData : ' + mapParentIdvsAllData);
                        }
                    }                        
                } 
            } 
            system.debug('Final mapParentIdvsAllData : ' + mapParentIdvsAllData);      
            return mapParentIdvsAllData;
        }catch(exception ex){
            throw ex;
            return null;
        }
    } 
    /**
    * retriveDatafromContent --- Retrive Content version data in string format by ParentId and Name
    * @param   Id : Paernt Object Id, string : FileName
    * @return  string : Retrived data in string format
    */
    public static string retriveDatafromContent(string ParentRecordId, string FileName){
        try{
            set<id> setContentDocumentIds = new set<id>();
            if(ParentRecordId != null && FileName != null && string.isNotEmpty(ParentRecordId) && string.isNotEmpty(FileName)){
                system.debug('I am hetre ');
                List<ContentDocumentLink> listContentDocumentLinks = [select id, LinkedEntityId, ContentDocumentId from ContentDocumentLink where LinkedEntityId = :ParentRecordId];
                for(ContentDocumentLink objContentDocumentLink : listContentDocumentLinks){
                    setContentDocumentIds.add(objContentDocumentLink.ContentDocumentId);
                }
                system.debug('I am here 2');
                //system.debug('listContentDocumentLinks : ' + listContentDocumentLinks);
                if(listContentDocumentLinks != null && !listContentDocumentLinks.isEmpty()){
                    List<contentVersion> lstContentVersions = [select id, VersionData,Title,ContentDocumentId from contentVersion where ContentDocumentId = :setContentDocumentIds and title= :FileName  Order By CreatedDate DESC];
                    system.debug('I am here 3');
                    //system.debug('lstContentVersions : ' + lstContentVersions);
                    if(lstContentVersions != null && !lstContentVersions.isEmpty()){
                        //system.debug('lstContentVersions[0].VersionData.toString() : ' + lstContentVersions[0].VersionData.toString());
                        system.debug('I am here 4');
                        if(lstContentVersions[0].VersionData != null)
                            return lstContentVersions[0].VersionData.toString();
                    }        
                }
            }
            return null;
        }catch(exception ex){
            throw ex;
            return null;
        }
    }
    
    /**
    * updateExistingContent --- update Content version data in string format by ParentId and Name
    * @param   Id : Paernt Object Id, string Filedata(File Content), string : FileName
    * @return  string : Retrived data in string format
    */
    public static string updateExistingContent(string ParentRecordId, string Filedata, string FileName){
        try{
            set<id> setContentDocumentIds = new set<id>();
            if(ParentRecordId != null && FileName != null && string.isNotEmpty(ParentRecordId) && string.isNotEmpty(FileName)){
                system.debug('I am hetre ');
                List<ContentDocumentLink> listContentDocumentLinks = [select id, LinkedEntityId, ContentDocumentId from ContentDocumentLink where LinkedEntityId = :ParentRecordId];
                for(ContentDocumentLink objContentDocumentLink : listContentDocumentLinks){
                    setContentDocumentIds.add(objContentDocumentLink.ContentDocumentId);
                }
                system.debug('listContentDocumentLinks : ' + listContentDocumentLinks);
                if(listContentDocumentLinks != null && !listContentDocumentLinks.isEmpty()){
                    contentVersion objContentVersion = [select id, VersionData,Title,ContentDocumentId from contentVersion where ContentDocumentId = :setContentDocumentIds and title= :FileName limit 1];
                    system.debug('objContentVersion : ' + objContentVersion);
                    if(objContentVersion != null){
                        system.debug('objContentVersion.VersionData.toString() : ' + objContentVersion.VersionData.toString());
                        if(Filedata != null && string.isBlank(Filedata)){
                            objContentVersion.VersionData = blob.valueOf(Filedata);
                            update objContentVersion;
                        }        
                    }        
                }
            }
            return null;
        }catch(exception ex){
            throw ex;
            return null;
        }
    }
    

   /**
    * Helps undating the existing file or create new file if not present agaist the Parent object
    * @param ParentRecordId -- Id against which the documents will be saved or updated
    * @param Filedata -- File content in string format
    * @param FileName -- Name of the file to be saved
    * @return void - No return Value
    * @authod Abhishek Mishra
    */
    public static string upDateExistingorAddNew(string ParentRecordId, string Filedata, string FileName){
        try{
            set<id> setContentDocumentIds = new set<id>();
            if(ParentRecordId != null && Filedata != null && FileName != null && string.isNotEmpty(ParentRecordId) && string.isNotEmpty(FileName) && string.isNotEmpty(Filedata)){
                List<ContentDocumentLink> listContentDocumentLinks = [select id, LinkedEntityId, ContentDocumentId from ContentDocumentLink where LinkedEntityId = :ParentRecordId];                          
                if(listContentDocumentLinks != null && !listContentDocumentLinks.isEmpty()){
                    for(ContentDocumentLink objContentDocumentLink : listContentDocumentLinks){
                        setContentDocumentIds.add(objContentDocumentLink.ContentDocumentId);
                    }
                    List<contentVersion> lstContentVersion = [select id                                                              from contentVersion 
                                                              where ContentDocumentId = :setContentDocumentIds and title= :FileName and isMajorVersion = false 
                                                              Order By CreatedDate DESC limit 1];
                    if(lstContentVersion != null && !lstContentVersion.isEmpty()){
                        if(Filedata != null && !string.isBlank(Filedata)){
                            lstContentVersion[0].VersionData = blob.valueOf(Filedata);
                            update lstContentVersion[0];
                        }        
                    }else{
                        createNewFile(ParentRecordId, Filedata, FileName);
                    }        
                }else{
                    createNewFile(ParentRecordId, Filedata, FileName);
                }
            }
            return null;
        }catch(exception ex){
           throw ex;
           return null;
        }
    }
    
    /**
    * Helps creating content file againt the parent object
    * @param ParentRecordId -- Id against which the documents will be saved
    * @param Filedata -- File content in string format
    * @param FileName -- Name of the file to be saved
    * @return void - No return Value
    * @authod Abhishek Mishra
    */
    public static void createNewFile(string ParentRecordId, string Filedata, string FileName){
        //Create ContentVersion Record
        ContentVersion objContentVersionRecord = new ContentVersion();
        objContentVersionRecord.ContentLocation = getConstantValue('HEP_CURRENT_LOCATION_S'); // S = within Salesforce, E = External
        objContentVersionRecord.VersionData = blob.valueOf(Filedata);
        objContentVersionRecord.Title = FileName;
        objContentVersionRecord.isMajorVersion = false;
        //cv1.ContentType = contentType;
        objContentVersionRecord.PathOnClient = FileName;
        insert objContentVersionRecord;

        list<ContentVersion> lstContentVersions = [SELECT Id, ContentDocumentId 
                                              FROM ContentVersion 
                                              WHERE Id = :objContentVersionRecord.id];                                              
    
        ContentDocumentLink objContentDocLink = new ContentDocumentLink();
        objContentDocLink.ContentDocumentId = lstContentVersions[0].ContentDocumentId;
        objContentDocLink.LinkedEntityId = ParentRecordId;
        objContentDocLink.ShareType = getConstantValue('HEP_SHARE_TYPE_V');
        insert objContentDocLink;
    }
     

    /**
    * Helps in Returning the value of a constant
    * @param sName -- name of the constant
    * @return value of the constant
    * @authod Sachin Agarwal
    */
    public static String getConstantValue(String sName){
        HEP_Constants__c objConstant = HEP_Constants__c.getValues(sName);
        
        if(objConstant != null){
            return objConstant.Value__c;
        }
        return null;
    }
    
    
    /**
    * AccessTokenWrapper --- wrapper for accesstoken for integrations
    * @author    Tejaswini Veliventi
    */
    public class AccessTokenWrapper { 
        public String access_token; 
        public String token_type;
        public String sandbox_url;
        public String service_url; 
        public String expires_in;
        public String errorCode;
        public String error;
    }
    
 /************************************************************************************************************************
  Method Name : createInterfaceRetryRecord
  Description : Utility method to create the Interface Transaction records which will be used for Retry
  Parameter   : String integBody - request body to be sent in the retry web-service
                String integName - Custom setting record name to be used for Endpoints and Credentials
                String integType - POST/GET
                String failureReason -  Error which has occured
  Return type : void
  *************************************************************************************************************************/
    public static void createInterfaceRetryRecord(String integName, String integBody, String integType, String failureReason){

        LOC_Interface_Retry_Tracker__c intRec = new LOC_Interface_Retry_Tracker__c();
        intRec.Interface_Name__c = integName;
        intRec.Interface_Type__c = integType;
        intRec.Request_Body__c = integBody;
        intRec.Retry_Counter__c = 1;
        intRec.Is_Success__c = false;
        intRec.Failure_Reason__c = failureReason;

        Database.insert(intRec);

        LOC_Error_Log.InsertAttachment(intRec.Id, 'Request Body', integBody);
    }
   //Below Class handles the response structure for OAuth
    public class Transactionresponse {
        public String access_token, token_type, expires_in;
        public Transactionresponse(String access_token, String token_type, String expires_in) {
            this.access_token = access_token;
            this.token_type = token_type;
            this.expires_in = expires_in;
        }
    } 

    /**
    * Retrieves the OAuth Token for the HTTP callouts 
    * @param    sServiceName- Name of custome Setting record which stores the Details of OAuth end point.
    * @return   Token type and Access token
    */
    public static map<String,String> retriveCatalogComponents(set<String> setCatIds) {

        string HEP_SELECTEDTITLES = HEP_Utility.getConstantValue('HEP_SELECTEDTITLES'); 
        string sCatalogComponents;
        list<string> lstComponents;
        string sComponents;
        string sCatId;
        List<CatalogCoupleComponentWrapper> lstCatalogCoupleComponentWrapper;
        map<String,String> mapCatIdVsComponents = new map<String,String>();
        if(setCatIds != null){
            for(string sCatalogId : setCatIds){
                sCatId = (Id)sCatalogId;
                sCatalogComponents = HEP_Integration_Util.retriveDatafromContent(sCatId, HEP_SELECTEDTITLES);
                if(!string.isBlank(sCatalogComponents)){
                    lstCatalogCoupleComponentWrapper =(list<CatalogCoupleComponentWrapper>) System.JSON.deserialize(sCatalogComponents, list<CatalogCoupleComponentWrapper>.class);
                    if(lstCatalogCoupleComponentWrapper != null && !lstCatalogCoupleComponentWrapper.isEmpty()){
                        lstComponents = new list<string>();
                        for(CatalogCoupleComponentWrapper objCatalogCoupleComponentWrapper : lstCatalogCoupleComponentWrapper){
                            lstComponents.add(objCatalogCoupleComponentWrapper.sFinancialTitleId);
                        }
                    }
                    if(lstComponents != null && !lstComponents.isEmpty())
                        sComponents = string.join(lstComponents,',');
                    else   
                        sComponents = ''; 
                }else{
                    sComponents = ''; 
                }   
                mapCatIdVsComponents.put(sCatalogId, sComponents);
            }       
        }
        return mapCatIdVsComponents;
    }   

    public static Boolean loadCachedIntegrationData(String parentId , String sContentObjectFileName , String sRefreshInterval){
        Boolean bReturnValue = false;
        String sTime = getConstantValue(sRefreshInterval);
        System.debug('sTime:: '+ sTime);
        //Long dttTimeNow = DateTime.now().getTime();
       // Long dttLastModifiedDate = dttTimeNow + 1;
        Integer iTimeLimit = -1*(String.isNotBlank(sTime) ? Integer.valueOf(sTime) : 60);
        datetime dateVar = system.now().addMinutes(iTimeLimit);

        //Code to retrieve the Last Modified Date...
        Set<Id> setContentDocumentIds = new Set<Id>();
        List<ContentDocumentLink> lstContentDocLinks = [select id, LinkedEntityId, ContentDocumentId from ContentDocumentLink where LinkedEntityId =: parentId];
        for(ContentDocumentLink objContentDocumentLink : lstContentDocLinks){
            setContentDocumentIds.add(objContentDocumentLink.ContentDocumentId);
        } 
        List<ContentVersion> lstContentVersion = [Select Id , LastModifiedDate from ContentVersion WHERE ContentDocumentId in: setContentDocumentIds AND Title =: sContentObjectFileName and LastModifiedDate>=:dateVar];
        System.debug(lstContentVersion);

        if(lstContentVersion != NULL && !lstContentVersion.isEmpty()){
        //    dttLastModifiedDate = lstContentVersion[0].LastModifiedDate.getTime();    
                bReturnValue = true;
        }else{
            return false;
        }

        //Check if integration should take place...
      //  if(((Integer)(dttTimeNow - dttLastModifiedDate))/1000/60 < iTimeLimit){
      //      bReturnValue = true;
      //  }

        return bReturnValue;
    }   

    /**
    * DateType --- Wrapper class for Catalog components for TV Coupling(Episodes)
    * @author    Abhishek Mishra
    */
    public class CatalogCoupleComponentWrapper {
        public String sFinancialTitleId;
        public String sFinancialTitleName;
        public String sInitialUSAirDate;
        public String sTitle;
        public String sTitleType;

        public CatalogCoupleComponentWrapper(String sFinancialTitleId, String sFinancialTitleName, String sInitialUSAirDate, String sTitle, String sTitleType){
            this.sFinancialTitleId = sFinancialTitleId;
            this.sFinancialTitleName = sFinancialTitleName;
            this.sInitialUSAirDate = sInitialUSAirDate;
            this.sTitle = sTitle;
            this.sTitleType = sTitleType;
        }
    }       
}


----------------------------------------------------------------------------
/**
* HEP_InterfaceTxnResponse --- Class to store integration request, response
* @author    Sachin Agarwal
*/
public with sharing class HEP_InterfaceTxnResponse {
    public String sRequest;
    public String sResponse;
    public Boolean bRetry; // If the bad response is received or the response body contains errors, it should be true otherwise false
    public String sStatus; // Success, Failure
    public Boolean bInboundTxn;
    public String sInterfaceName;
    public String sInterfaceId;
    public String sInterfaceTxnId;
    public String sSourceId;
    public String sErrorMsg;
    public Integer iCurrentNoOfRetries;
    public Integer iMaxRetriesAllowed;
    public Integer iRetryInterval;
    public Boolean bIsSourceAsAttachment;
    public Boolean bIsCreateContentFile;
    public Integer iNoOfRecords;
    
    /**
     * Class Constructor
     * @return nothing
     */
    public HEP_InterfaceTxnResponse(){
      bRetry = false;
      bInboundTxn = false;
      bIsSourceAsAttachment = false;
      bIsCreateContentFile  = false;
    }
}

---------------------------------------------------------------------------------------

/**
* HEP_IntegrationInterface --- Interface declaring the method which all the integration classes
*                  need to implement
* @author    Sachin Agarwal
*/
public interface HEP_IntegrationInterface {
  
  /**
    * performTransaction --- Method that will carry out the actual integration business logic
    * @author    Sachin Agarwal
    */
  void performTransaction(HEP_InterfaceTxnResponse objTxnResponse);
}

-----------------------------------------------------------------------------------------------------------

/**
 * HEP_Itunes_Price --- Class for Calling the API to update Price in iTunes
 * @author  Balaji S
 */
Public class HEP_Itunes_Price implements HEP_IntegrationInterface{

    public Static String sHEP_Test_Apple_ID = HEP_Utility.getConstantValue('HEP_Test_Apple_ID');
    Boolean dateUpdated = false;

    /**
    * Perform the API call.
    * @param  empty response
    * @return 
    * @author Balaji S 
    */

    Public void performTransaction(HEP_InterfaceTxnResponse objTxnResponse){        
        String sAccessToken;
        String RecordId; 
        system.debug('HEP_InterfaceTxnResponse in interface : ' + objTxnResponse);
        sAccessToken = HEP_Integration_Util.getAuthenticationToken('HEP_NTS_E1_OAuth');
        HEP_Response responseWrapper = new HEP_Response();
        if(sAccessToken!= null && sAccessToken.startsWith(HEP_Utility.getConstantValue('HEP_TOKEN_BEARER')) && objTxnResponse != null){
            HTTPRequest httpRequest = new HTTPRequest();
            HEP_Services__c serviceDetails = HEP_Services__c.getInstance('HEP_iTunes_Service');
            if(serviceDetails != null){
                httpRequest.setEndpoint(serviceDetails.Endpoint_URL__c + serviceDetails.Service_URL__c);
                httpRequest.setMethod('POST');
                httpRequest.setTimeout(120000);
                httpRequest.setHeader('Content-type','application/json');
                httpRequest.setHeader('Authorization',sAccessToken);
                if(String.isNotBlank(objTxnResponse.sSourceId)){
                    system.debug('objTxnResponse.sSourceId'+objTxnResponse.sSourceId);
                    RecordId = getObjectId(objTxnResponse.sSourceId);
                    httpRequest.setBody(createRequestBody(RecordId));
                    HTTP http = new HTTP();
                    HTTPResponse httpResp = http.send(httpRequest);
                    system.debug('httpResp : ' + httpResp);
                    objTxnResponse.sRequest = httpRequest.toString()+'\n Body : \t'+httpRequest.getBody(); //request details
                    objTxnResponse.sResponse = httpResp.getBody(); //Response from callout
                    String sStatus = httpResp.getStatus();
                    if(sStatus.equals(HEP_Utility.getConstantValue('HEP_STATUS_OK'))){  
                        responseWrapper = (HEP_Response)JSON.deserialize(httpResp.getBody(),HEP_Response.class);
                        System.debug('aaqqq'+responseWrapper);
                        if(String.valueOf(responseWrapper.IsErrorOccured).equalsIgnoreCase(HEP_Utility.getConstantValue('HEP_BOOLEAN_VALUE_TRUE'))){
                            objTxnResponse.sStatus = HEP_Utility.getConstantValue('HEP_FAILURE');
                            objTxnResponse.sErrorMsg = responseWrapper.Messages[0].messageDetail;
                            objTxnResponse.bRetry =  true;
                        }
                        else{
                            objTxnResponse.sStatus = HEP_Utility.getConstantValue('HEP_Int_Txn_Response_Status_Success');
                            objTxnResponse.bRetry = false;
                            updateProduct(responseWrapper.AppleId, RecordId);

                        }
                    }    
                    else{
                        objTxnResponse.sStatus = HEP_Utility.getConstantValue('HEP_FAILURE');
                        objTxnResponse.sErrorMsg = httpResp.getStatus();
                        objTxnResponse.bRetry = true;
                    }                  
                }
            }    
        }
        else{
            System.debug('Invalid Access Token Or Invalid txnResponse data sent');
            objTxnResponse.sStatus = HEP_Utility.getConstantValue('HEP_FAILURE');
            objTxnResponse.sErrorMsg = HEP_Utility.getConstantValue('HEP_INVALID_TOKEN');
            objTxnResponse.bRetry = true;
        }       
    }   
    

      /**
    * Perform the API call.
    * @param  Ids
    * @return Stringified
    * @author Balaji S
    */
    public String createRequestBody(String objectId){
    
        System.debug('createRequestBody--------'+objectId);
        list<HEP_MDP_Promotion_Product_Detail__c> lstPromotionDetail = new list<HEP_MDP_Promotion_Product_Detail__c>();
        list<HEP_MDP_Promotion_Product__c> lstPromotionProduct = new list<HEP_MDP_Promotion_Product__c>();
        map<String,HEP_MDP_Promotion_Product_Detail__c> mapPromtionDetail = new map<String,HEP_MDP_Promotion_Product_Detail__c>();
        HEP_MDP_Promotion_Product__c objPromotion_Product = new HEP_MDP_Promotion_Product__c();
        HEP_MDP_Promotion_Product_Detail__c objPromotion_Product_Details = new HEP_MDP_Promotion_Product_Detail__c();
        list<HEP_List_Of_Values__c>  lstValues = new list<HEP_List_Of_Values__c>();
        Map<String,String> mapHDValues = new  Map<String,String>();
        Map<String,String> mapSDValues = new  Map<String,String>();
        HEP_Itune_Wrapper iTuneWrap = new HEP_Itune_Wrapper();
        Map<String,Decimal> mapEveryDayValue = new Map<String,Decimal>();
        String HDkey;
        String SDkey;
        String HDValue;
        String SDValue;
        if(objectId != NULL){    
            lstPromotionProduct = [Select id,HEP_Territory__r.Name, HEP_Catalog__c,Title_EDM__c,HEP_Territory__r.Flag_Country_Code__c,Record_Status__c,Product_Start_Date__c,Product_End_Date__c,HEP_Promotion__c,HEP_Previous_Start_Date__c,HEP_Previous_End_Date__c  from HEP_MDP_Promotion_Product__c where id =: objectId AND ( Approval_Status__c =: HEP_Utility.getConstantValue('HEP_APPROVAL_APPROVED') OR (HEP_Sent_to_iTunes__c = true AND Record_Status__c = 'Deleted') ) ];   
            
            if(lstPromotionProduct != NULL && !lstPromotionProduct.IsEmpty() ){
                objPromotion_Product  = lstPromotionProduct[0];
            }
            
            lstPromotionDetail =  [SELECT id,Promo_SRP__c,Format__c,Channel__c,Record_Status__c,Promo_WSP__c, HEP_MDP_Product_Mapping__r.Adam_Id__c FROM HEP_MDP_Promotion_Product_Detail__c WHERE Channel__c =: HEP_Utility.getConstantValue('HEP_CHANNEL_EST') AND (Format__c =: HEP_Utility.getConstantValue('HEP_HD') OR Format__c =: HEP_Utility.getConstantValue('HEP_SD')) AND HEP_Promotion_MDP_Product__c =: objPromotion_Product.id AND HEP_MDP_Product_Mapping__c != NULL ];
            System.debug('objPromotion_Product'+objPromotion_Product);
            System.debug('lstPromotionDetail'+lstPromotionDetail);

            if(lstPromotionDetail!=NULL && !lstPromotionDetail.IsEmpty() ){
                for(HEP_MDP_Promotion_Product_Detail__c  obj: lstPromotionDetail){
                    mapPromtionDetail.put(obj.Format__c,obj);
                }            
                System.debug('mapPromtionDetail'+mapPromtionDetail);

                
                for(HEP_List_Of_Values__c values : [select id,Name_And_Parent__c,Parent_Value__c,Record_Status__c,Type__c, Values__c,Order__c from HEP_List_Of_Values__c 
                            where (Type__c =: HEP_Utility.getConstantValue('HEP_MDP_EST_TIER') OR Type__c =: HEP_Utility.getConstantValue('HEP_MDP_VOD_TIER')) AND 
                            (Parent_Value__c =: HEP_Utility.getConstantValue('HEP_HD') OR Parent_Value__c =: HEP_Utility.getConstantValue('HEP_SD') ) AND 
                            Name =: objPromotion_Product.HEP_Territory__r.Name ] ){
                                
                    //put all the HD tier values into a map.
                    if(values.Parent_Value__c == HEP_Utility.getConstantValue('HEP_HD')){
                        mapHDValues.put(values.Order__c,values.Values__c);
                    }
                    else{
                        mapSDValues.put(values.Order__c,values.Values__c);
                    }
                }                

                // Getting the Key 
                if(objPromotion_Product.Title_EDM__c !=NULL){
                    if(mapPromtionDetail != NULL && !mapPromtionDetail.IsEmpty() && mapPromtionDetail.containsKey(HEP_Utility.getConstantValue('HEP_HD')) ){
                        //objPromotion_Product_Details = mapPromtionDetail.get(HEP_Utility.getConstantValue('HEP_HD'));
                        HDkey = mapPromtionDetail.get(HEP_Utility.getConstantValue('HEP_HD')).Channel__c+objPromotion_Product.Title_EDM__c+objPromotion_Product.HEP_Territory__c+mapPromtionDetail.get(HEP_Utility.getConstantValue('HEP_HD')).Format__c+objPromotion_Product.Product_Start_Date__c;
                    }
                    if(mapPromtionDetail != NULL && !mapPromtionDetail.IsEmpty() && mapPromtionDetail.containsKey(HEP_Utility.getConstantValue('HEP_SD')) ){
                        //objPromotion_Product_Details = mapPromtionDetail.get(HEP_Utility.getConstantValue('HEP_SD'));
                        SDkey = mapPromtionDetail.get(HEP_Utility.getConstantValue('HEP_SD')).Channel__c+objPromotion_Product.Title_EDM__c+objPromotion_Product.HEP_Territory__c+mapPromtionDetail.get(HEP_Utility.getConstantValue('HEP_SD')).Format__c+objPromotion_Product.Product_Start_Date__c;
                    }
                }
                else{
                    if(mapPromtionDetail != NULL && !mapPromtionDetail.IsEmpty() && mapPromtionDetail.containsKey(HEP_Utility.getConstantValue('HEP_HD')) ){
                        objPromotion_Product_Details = mapPromtionDetail.get(HEP_Utility.getConstantValue('HEP_HD'));
                        HDkey = objPromotion_Product_Details.Channel__c+objPromotion_Product.HEP_Catalog__c+objPromotion_Product.HEP_Territory__c+objPromotion_Product_Details.Format__c+objPromotion_Product.Product_Start_Date__c;
                    }
                    if(mapPromtionDetail != NULL && !mapPromtionDetail.IsEmpty() && mapPromtionDetail.containsKey(HEP_Utility.getConstantValue('HEP_SD')) ){
                        objPromotion_Product_Details = mapPromtionDetail.get(HEP_Utility.getConstantValue('HEP_SD'));
                        SDkey = objPromotion_Product_Details.Channel__c+objPromotion_Product.HEP_Catalog__c+objPromotion_Product.HEP_Territory__c+objPromotion_Product_Details.Format__c+objPromotion_Product.Product_Start_Date__c;
                    }

                }

                System.debug('mapHDValues'+mapHDValues);
                System.debug('mapSDValues'+mapSDValues);
                System.debug('HD KEY'+HDkey);
                System.debug('SD KEY'+SDkey);


                Datetime start_date = (Datetime)objPromotion_Product.Product_Start_Date__c;
                Datetime end_date = (Datetime)objPromotion_Product.Product_End_Date__c;
                System.debug('mapPromtionDetail'+mapPromtionDetail);

                //Creating the Request
                iTuneWrap.start_date = start_date.format('yyyy-MM-dd');
                iTuneWrap.end_date = end_date.format('yyyy-MM-dd');
                
                if(sHEP_Test_Apple_ID != '' && sHEP_Test_Apple_ID != NULL)
                    iTuneWrap.appleID = sHEP_Test_Apple_ID;
                else{
                    if(lstPromotionDetail[0].HEP_MDP_Product_Mapping__c != NULL && lstPromotionDetail[0].HEP_MDP_Product_Mapping__r.Adam_Id__c != NULL)
                        iTuneWrap.appleID = lstPromotionDetail[0].HEP_MDP_Product_Mapping__r.Adam_Id__c;
                }

                iTuneWrap.previousStartDate = iTuneWrap.previousEndDate = ((objPromotion_Product.Record_Status__c == HEP_Utility.getConstantValue('HEP_MDP_Active') && dateUpdated == true)? String.Valueof(objPromotion_Product.HEP_Previous_Start_Date__c) :'');
                iTuneWrap.previousEndDate = iTuneWrap.previousEndDate = ((objPromotion_Product.Record_Status__c == HEP_Utility.getConstantValue('HEP_MDP_Active')  && dateUpdated == true)? String.Valueof(objPromotion_Product.HEP_Previous_End_Date__c) :'');   
                iTuneWrap.territory=objPromotion_Product.HEP_Territory__r.Flag_Country_Code__c;

                //Populating EST_HD_WSP and EST_SD_WSP VALUE

                if((mapPromtionDetail.get(HEP_Utility.getConstantValue('HEP_SD')).Record_Status__c != HEP_Utility.getConstantValue('HEP_MDP_Active') 
                    || mapPromtionDetail.get(HEP_Utility.getConstantValue('HEP_HD')).Record_Status__c != HEP_Utility.getConstantValue('HEP_MDP_Active')
                    || objPromotion_Product.Record_Status__c != HEP_Utility.getConstantValue('HEP_MDP_Active'))){
                 
                    mapEveryDayValue = HEP_Utility.calculateEverydaySRP(objPromotion_Product.HEP_Promotion__c);

                    for(String Str:mapEveryDayValue.keySet()){
                        if(Str.contains(HDkey)){
                            HDValue = mapHDValues.get(String.valueof(mapEveryDayValue.get(Str)));
                        }
                        if(Str.contains(SDkey)){
                            SDValue = mapSDValues.get(String.valueof(mapEveryDayValue.get(Str)));
                        }
                    }

                    system.debug('HDValue'+HDValue);
                    system.debug('SDValue'+SDValue);
                    // Promtion is Inactive 
                    if(objPromotion_Product.Record_Status__c != HEP_Utility.getConstantValue('HEP_MDP_Active') || 
                       ((mapPromtionDetail.get(HEP_Utility.getConstantValue('HEP_SD')).Record_Status__c != HEP_Utility.getConstantValue('HEP_MDP_Active') 
                        && mapPromtionDetail.get(HEP_Utility.getConstantValue('HEP_HD')).Record_Status__c != HEP_Utility.getConstantValue('HEP_MDP_Active')))){
                         iTuneWrap.EST_HD_WSP = HDValue;
                         iTuneWrap.EST_SD_WSP = SDValue;
                    }

                    else if(mapPromtionDetail.get(HEP_Utility.getConstantValue('HEP_HD')).Record_Status__c != HEP_Utility.getConstantValue('HEP_MDP_Active'))
                    {
                        iTuneWrap.EST_HD_WSP = HDValue;
                        iTuneWrap.EST_SD_WSP = mapSDValues.get(String.valueof(mapPromtionDetail.get(HEP_Utility.getConstantValue('HEP_SD')).Promo_SRP__c));
                    }  
                    else{
                        system.debug('mapHDValues.get(HDValue)'+Integer.valueOf(mapPromtionDetail.get(HEP_Utility.getConstantValue('HEP_HD')).Promo_SRP__c));
                        iTuneWrap.EST_HD_WSP = mapHDValues.get(String.valueof(mapPromtionDetail.get(HEP_Utility.getConstantValue('HEP_HD')).Promo_SRP__c));
                        iTuneWrap.EST_SD_WSP = SDValue;
                    }                            
                }
                else{                     
                        iTuneWrap.EST_SD_WSP = mapSDValues.get(String.valueof(mapPromtionDetail.get(HEP_Utility.getConstantValue('HEP_SD')).Promo_SRP__c));
                        iTuneWrap.EST_HD_WSP = mapHDValues.get(String.valueof(mapPromtionDetail.get(HEP_Utility.getConstantValue('HEP_HD')).Promo_SRP__c));
                    }
            }
    
        System.debug('iTuneWrap'+iTuneWrap);        
        return JSON.serialize(iTuneWrap);
        }
        return NULL;
    }   



    /**
    * Check to which object ID belong's to and return Promotion ID
    * @param  Ids
    * @return Stringified
    * @author Balaji S
    */

    public String getObjectId(String ObjId){
        System.debug('getObjectId--------'+ObjId);
        ID objectId;
        objectId = ObjId;
        //HEP_MDP_Promotion_Product_Detail__c PromotionDetail = new HEP_MDP_Promotion_Product_Detail__c();
        //System.debug('objectId.getSObjectType().getDescribe().getName()'+objectId.getSObjectType().getDescribe().getName());
        //if(objectId.getSObjectType().getDescribe().getName() == HEP_Utility.getConstantValue('HEP_MDP_Promotion_Product_Detail'))
        //{
        //    PromotionDetail = [select id,Everyday_WSP__c,HEP_Promotion_MDP_Product__c from HEP_MDP_Promotion_Product_Detail__c where ID =: objId];
        //    System.debug('PromotionDetail'+PromotionDetail);
        //    return PromotionDetail.HEP_Promotion_MDP_Product__c;
        //}
        //else{
            System.debug('In else part');
            dateUpdated = true;
            return objectId;
        //}
    }

    /**
    * Is the Response the Sucess then Update the Promotion_product Previous Start date and End Date 
    * @param  Ids
    * @return Stringified
    * @author Balaji S
    */

    Public void updateProduct(String AppleId, String RecordId){
        list<HEP_MDP_Promotion_Product__c> lstObjPromotion = new list<HEP_MDP_Promotion_Product__c>();
        if(!String.isBlank(AppleId)){
            System.debug('updating the Record');
            lstObjPromotion = [Select id,HEP_Previous_End_Date__c,HEP_Previous_Start_Date__c,HEP_Sent_to_iTunes__c,Product_Start_Date__c,Product_End_Date__c from HEP_MDP_Promotion_Product__c where id =: RecordId];
            if(lstObjPromotion != NULL && !lstObjPromotion.IsEmpty() ){
                lstObjPromotion[0].HEP_Previous_Start_Date__c = lstObjPromotion[0].Product_Start_Date__c;
                lstObjPromotion[0].HEP_Previous_End_Date__c = lstObjPromotion[0].Product_End_Date__c;
                lstObjPromotion[0].HEP_Sent_to_iTunes__c = true;
                 System.debug('ObjPromotion'+lstObjPromotion[0]);
                update lstObjPromotion[0];
            }
        }    
    }

    //Response Wrapper 
    public class HEP_Itune_Wrapper{
        public String start_date{get;set;}
        public String EST_HD_WSP{get;set;}
        public String end_date{get;set;}
        public String EST_SD_WSP{get;set;}
        public String previousStartDate{get;set;}
        public String territory{get;set;}
        public String previousEndDate{get;set;}
        public String appleID{get;set;}
    }
    
    public class HEP_Response{
            public Boolean IsErrorOccured{get;set;}
            public list<Messages> Messages{get;set;}
            public String AppleId{get;set;}
            
            public HEP_Response(){
                Messages = new list<Messages>();
            }
    }   
        
        public class Messages{
            public String messageDetail{get;set;}
            public String messagelevel{get;set;}
        }
}
-----------------------------------------------------------------------------------------------------------------------
/**
* HEP_ExecuteIntegration --- Class to schedule the execution of integration class
* @author    Sachin Agarwal
*/
global class HEP_ExecuteIntegration{
    
    /**
    * retryTxn --- Method that is called on clicking retry button on interface txn detail page
    * @param sSourceId id of the record or the inbound request body
    * @param sInterfaceTxnId id of the interface transaction record
    * @param sInterfaceName name of the interface
    * @author    Sachin Agarwal
    */
    webservice static void retryTxn(String sSourceId, String sInterfaceTxnId, String sInterfaceName){
        
        executeIntegMethod(sSourceId, sInterfaceTxnId, sInterfaceName);
    }
    
    /**
    * executeIntegMethod --- To call the relevant class for integration
    * @param sSourceId id of the record or the inbound request body
    * @param sInterfaceTxnId id of the interface transaction record
    * @param sInterfaceName name of the interface
    * @author    Sachin Agarwal
    */
    
    public static HEP_InterfaceTxnResponse executeIntegMethod(String sSourceId, String sInterfaceTxnId, String sInterfaceName){
        
        String sClassName;
        String sInterfaceId;
        String sRequest;
        Integer iRetryInterval = 0;
        Integer iRetryLimit = 0;
        Integer iCurrentRetryCount = 0;
        Boolean bRetryFlag = false;
        Boolean bIsInboundTxn = false;
        Boolean bIsSourceAsAttachment = false;
        Boolean bIsCreateContentFile = false;
        
        HEP_InterfaceTxnResponse objTxnResponse = new HEP_InterfaceTxnResponse();
        // If interface txn id is present, find out the required details
        if(!String.isEmpty(sInterfaceTxnId)){
            list<HEP_Interface_Transaction__c> lstInterfaceTxn;
            lstInterfaceTxn = [SELECT id, HEP_Interface__c, HEP_Interface__r.Class__c, HEP_Interface__r.Integration_Name__c, Retry_Count__c,
                                      HEP_Interface__r.Retry_Flag__c, HEP_Interface__r.Retry_Interval__c, HEP_Interface__r.Retry_Limit__c,
                                      HEP_Interface__r.Type__c,HEP_Interface__r.Store_Source_As_Attachment__c,HEP_Interface__r.Create_Content_File__c
                               FROM HEP_Interface_Transaction__c
                               WHERE id = :sInterfaceTxnId];
            
            // If we have a matching interface transaction record
            if(lstInterfaceTxn != null && !lstInterfaceTxn.isEmpty()){
                sClassName = lstInterfaceTxn[0].HEP_Interface__r.Class__c;
                sInterfaceName = lstInterfaceTxn[0].HEP_Interface__r.Integration_Name__c;
                sInterfaceId = lstInterfaceTxn[0].HEP_Interface__c;
                iRetryInterval = lstInterfaceTxn[0].HEP_Interface__r.Retry_Interval__c != null ? Integer.valueOf(lstInterfaceTxn[0].HEP_Interface__r.Retry_Interval__c) : 0;
                bRetryFlag = lstInterfaceTxn[0].HEP_Interface__r.Retry_Flag__c;
                iRetryLimit = lstInterfaceTxn[0].HEP_Interface__r.Retry_Limit__c != null ? Integer.valueOf(lstInterfaceTxn[0].HEP_Interface__r.Retry_Limit__c) : 0;
                iCurrentRetryCount = lstInterfaceTxn[0].Retry_Count__c != null ? Integer.valueOf(lstInterfaceTxn[0].Retry_Count__c) : 0;
                bIsInboundTxn = lstInterfaceTxn[0].HEP_Interface__r.Type__c != null && HEP_Integration_Util.getConstantValue('HEP_INBOUND_INTERFACE_TYPE') != null && lstInterfaceTxn[0].HEP_Interface__r.Type__c.containsIgnoreCase(HEP_Integration_Util.getConstantValue('HEP_INBOUND_INTERFACE_TYPE')) ? true : false;
                bIsSourceAsAttachment =  lstInterfaceTxn[0].HEP_Interface__r.Store_Source_As_Attachment__c;
                bIsCreateContentFile =   lstInterfaceTxn[0].HEP_Interface__r.Create_Content_File__c;

                // If its an inbound txn, extract the request else if its the outbound and the surce as attachment is true extract the source
                if(bIsInboundTxn){
                    sSourceId = contentDocumentSourceId(sInterfaceTxnId,bIsInboundTxn);
                }else if(!bIsInboundTxn && bIsSourceAsAttachment){
                    sSourceId = contentDocumentSourceId(sInterfaceTxnId,bIsInboundTxn);
                } 
            } 
        }
        // If interface txn id is not present but interface name is, find out the required details
        else if(!String.isEmpty(sInterfaceName)){
            list<HEP_Interface__c> lstInterface = new list<HEP_Interface__c>();
            lstInterface = [SELECT id, Integration_Name__c, Class__c, Retry_Flag__c, Retry_Interval__c, Retry_Limit__c, Type__c,Store_Source_As_Attachment__c,Create_Content_File__c
                               FROM HEP_Interface__c
                               WHERE Integration_Name__c = :sInterfaceName];
            
            // If we have a matching interface record
            if(!lstInterface.isEmpty()){
                sClassName = lstInterface[0].Class__c;
                sInterfaceName = lstInterface[0].Integration_Name__c;
                sInterfaceId = lstInterface[0].id;
                iRetryInterval = lstInterface[0].Retry_Interval__c != null ? Integer.valueOf(lstInterface[0].Retry_Interval__c) : 0;
                bRetryFlag = lstInterface[0].Retry_Flag__c;
                iRetryLimit = lstInterface[0].Retry_Limit__c != null ? Integer.valueOf(lstInterface[0].Retry_Limit__c) : 0; 
                bIsInboundTxn = lstInterface[0].Type__c != null && HEP_Integration_Util.getConstantValue('HEP_INBOUND_INTERFACE_TYPE') != null && lstInterface[0].Type__c.containsIgnoreCase(HEP_Integration_Util.getConstantValue('HEP_INBOUND_INTERFACE_TYPE')) ? true : false;
                bIsSourceAsAttachment = lstInterface[0].Store_Source_As_Attachment__c;
                bIsCreateContentFile = lstInterface[0].Create_Content_File__c;
            } 
        }
        objTxnResponse.bIsSourceAsAttachment = bIsSourceAsAttachment;
        objTxnResponse.bIsCreateContentFile = bIsCreateContentFile;
        objTxnResponse.bInboundTxn = bIsInboundTxn;
        objTxnResponse.sInterfaceName = sInterfaceName;
        objTxnResponse.sInterfaceTxnId = sInterfaceTxnId;
        objTxnResponse.sInterfaceId = sInterfaceId;
        if(!bIsInboundTxn){
            objTxnResponse.sSourceId = sSourceId;
        }
        else{
            objTxnResponse.sRequest = sSourceId;
        }       
    
        // If the retry is allowed on the txn
        if(bRetryFlag){
            objTxnResponse.iMaxRetriesAllowed = iRetryLimit;
        }
        else{
            objTxnResponse.iMaxRetriesAllowed = 0;
        }
        objTxnResponse.bIsSourceAsAttachment = bIsSourceAsAttachment;
        objTxnResponse.iCurrentNoOfRetries = iCurrentRetryCount;
        objTxnResponse.iRetryInterval = iRetryInterval;
        // If the class to be called is not found
        if(String.isEmpty(sClassName)){
            objTxnResponse.sStatus = HEP_Integration_Util.getConstantValue('HEP_INTEGRATION_CLASS_NOT_FOUND_ERROR');
            return objTxnResponse;
        }
        else if(String.isEmpty(sInterfaceId)){
            objTxnResponse.sStatus = HEP_Integration_Util.getConstantValue('HEP_INTERFACE_NOT_ACTIVE_ERROR');
            return objTxnResponse;
        }
        else if(!bIsInboundTxn && String.isEmpty(sSourceId)){
            objTxnResponse.sStatus = HEP_Integration_Util.getConstantValue('HEP_INTERFACE_SOURCE_ID_NOT_EMPTY');
            return objTxnResponse;
        }
        else if(bIsInboundTxn == true && String.isEmpty(objTxnResponse.sRequest)){
            objTxnResponse.sStatus = HEP_Integration_Util.getConstantValue('HEP_INTERFACE_REQUEST_ID_NOT_EMPTY');
            return objTxnResponse;
        }
        
                
        Type objTargetClassType = Type.forName(sClassName);
        
        Exception objExceptionRaised;
        
        // If the class to be called is not a valid class       
        if(objTargetClassType == null){
            objTxnResponse.sStatus = HEP_Integration_Util.getConstantValue('HEP_INTEGRATION_CLASS_NOT_FOUND_ERROR');    
        }         
        else{
            try{       
                // Calling out the method responsible for carrying out the integration logic    
                HEP_IntegrationInterface objTargetClass = (HEP_IntegrationInterface)objTargetClassType.newInstance();
                objTargetClass.performTransaction(objTxnResponse);
            }
            catch(Exception ex){                
                objExceptionRaised = ex;
            }
            finally{
                // If its an exception case in the called class
                if(objExceptionRaised != null){
                    
                    objTxnResponse.sErrorMsg = objExceptionRaised.getMessage();
                    objTxnResponse.sStatus = HEP_Integration_Util.getConstantValue('HEP_FAILURE');
                    
                    HEP_Integration_Util.createInterfaceTxn(objTxnResponse);
                    
                    // To do: Create txn record and the error record
                    throw objExceptionRaised;
                }
                else{
                    HEP_Integration_Util.createInterfaceTxn(objTxnResponse);
                }
            }            
        }
        
        return objTxnResponse;
    }

    public static String contentDocumentSourceId(String sInterfaceTxnId,Boolean bIsInboundTxn){
        String sSourceId = null;
        String sTitle;
        list<ContentDocumentLink> lstContentDocumentLinks;
        lstContentDocumentLinks = [SELECT ID, ContentDocumentId
                                   FROM ContentDocumentLink
                                   WHERE LinkedEntityId = :sInterfaceTxnId];
        if(lstContentDocumentLinks != null && !lstContentDocumentLinks.isEmpty()){ 
                        
            set<id> setContentDocumentIds = new set<id>();
            for(ContentDocumentLink objContentDocumentLink : lstContentDocumentLinks){ 
                setContentDocumentIds.add(objContentDocumentLink.ContentDocumentId);
            }
            
            list<ContentVersion> lstContentVersion = new list<ContentVersion>();
            if(bIsInboundTxn)
                sTitle = HEP_Integration_Util.getConstantValue('HEP_INTEGRATION_REQUEST');
            else
                sTitle = HEP_Integration_Util.getConstantValue('HEP_INTEGRATION_SOURCE');  
            lstContentVersion = [SELECT id, VersionData, Title
                                 FROM ContentVersion
                                 WHERE ContentDocumentId IN :setContentDocumentIds AND Title = :sTitle order by createddate]; 
            
            if(!lstContentVersion.isEmpty()){
                sSourceId = lstContentVersion[0].VersionData != null ? EncodingUtil.base64Decode(EncodingUtil.base64Encode(lstContentVersion[0].VersionData)).toString()  : null;
            }
        }
        return sSourceId;       
    }

}

